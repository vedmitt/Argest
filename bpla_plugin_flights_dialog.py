# -*- coding: utf-8 -*-
"""
/***************************************************************************
 bpla_plugin_flightsDialog
                                 A QGIS plugin
 Selecting and deleting odds and ends of flights.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-01-13
        git sha              : $Format:%H$
        copyright            : (C) 2021 by SibGis
        email                : sibgis@qgis.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os

from PyQt5.QtCore import QVariant
from qgis._core import *

from PyQt5.QtGui import QIcon
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from PyQt5.QtGui import *
from PyQt5.QtCore import QDateTime, Qt

from time import perf_counter

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
from .tools.FeaturesList import FeaturesList
from .tools.ClassificationTool import ClassificationTool
from .tools.Feature import Feature
from .tools.LayerManager import LayerManager
from .tools.GuiElemIFace import GuiElemIFace

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'bpla_plugin_flights_dialog_base.ui'))


class bpla_plugin_flightsDialog(QtWidgets.QDialog, FORM_CLASS):

    def __init__(self, parent=None):
        """Constructor."""
        super(bpla_plugin_flightsDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        # self.initActiveLayersComboBox()
        self.toolButton_cbreload.setIcon(QIcon(':/plugins/bpla_plugin_flights/icons/icon_reload.png'))
        self.toolButton_cbreload.clicked.connect(self.initActiveLayersComboBox)
        # self.checkBox.setChecked(False)
        self.toolButton.clicked.connect(self.getSaveFileName)
        self.toolButton_folder.clicked.connect(self.getInputFolder)
        self.pushButton.clicked.connect(self.doResult)
        # self.lineEdit.setText('')
        # self.lineEdit_folder.setText('')
        # self.lineEdit.setText(r'/Users/ronya/My_Documents/output/test.shp')
        # self.lineEdit_folder.setText(r'/Users/ronya/My_Documents/output/test_karelia')
        self.initInputFolderLine()
        self.radioButton_cb.clicked.connect(self.initComboBox)
        self.radioButton_folder.clicked.connect(self.initInputFolderLine)

    def initComboBox(self):
        self.comboBox.setEnabled(True)
        self.toolButton_cbreload.setEnabled(True)
        self.initActiveLayersComboBox()
        self.lineEdit_folder.setEnabled(False)
        self.toolButton_folder.setEnabled(False)
        self.checkBox_join_files.setChecked(False)
        self.checkBox_join_files.setEnabled(False)
        self.lineEdit.setText(r'/Users/ronya/My_Documents/output/test')

    def initInputFolderLine(self):
        # self.comboBox.clear()
        self.comboBox.setEnabled(False)
        self.toolButton_cbreload.setEnabled(False)
        self.lineEdit_folder.setText(r'/Users/ronya/My_Documents/karelia')
        self.lineEdit.setText(r'/Users/ronya/My_Documents/karelia/karelia_results')
        self.lineEdit_folder.setEnabled(True)
        self.toolButton_folder.setEnabled(True)
        self.checkBox_join_files.setEnabled(True)

    def initActiveLayersComboBox(self):
        self.comboBox.clear()
        lg = LayerManager()
        dictLyr = lg.getActiveLayers()
        self.comboBox.addItems(dictLyr.keys())
        self.comboBox.show()

    def getInputFolder(self):
        dlg = QtWidgets.QFileDialog(self)
        fn = dlg.getExistingDirectory(self, r'/Users/ronya/My_Documents')
        self.lineEdit_folder.setText(fn)

    def getSaveFileName(self):
        dlg = QtWidgets.QFileDialog(self)
        if self.radioButton_cb.isChecked() or self.checkBox_join_files.isChecked():
            if self.radioButton_txt.isChecked():
                filter = '*.txt'
            elif self.radioButton_shp.isChecked():
                filter = '*.shp'
            else:
                filter = ''
            fn = dlg.getSaveFileName(self, 'Save file', r'/Users/ronya/My_Documents/karelia/karelia_results', filter=filter)[0]
        else:
            fn = dlg.getExistingDirectory(self, r'/Users/ronya/My_Documents/karelia/karelia_results')
        self.lineEdit.setText(fn)

    def getSaveFilepath(self):
        # get file name from line edit
        if self.lineEdit.text() != '':
            filepath = self.lineEdit.text()
            fn = os.path.basename(filepath)
            fn = fn.split('.')
            filename = fn[0]
            # if self.radioButton_txt.isChecked():
            #     filepath = filepath + self.radioButton_txt.text()
            # elif self.radioButton_shp.isChecked():
            #     filepath = filepath + self.radioButton_shp.text()
            return [filepath, filename]
        else:
            return None

    def mainAlgorithm(self, guiUtil, fileType, in_filepath, in_filename, save_file_attr):
        lg = LayerManager()
        features = None

        try:
            # создаем вектор qgis
            if fileType == 'delimitedtext':
                uri = "file:///" + in_filepath + "?type=csv&delimiter=%5Ct&maxFields=10000&detectTypes=yes&xField=LON&yField=LAT&zField=ALT&crs=EPSG:28402&spatialIndex=no&subsetIndex=no&watchFile=no"
                vlayer = QgsVectorLayer(uri, in_filename, fileType)
            elif fileType == 'ESRI Shapefile':
                vlayer = QgsVectorLayer(in_filepath, in_filename, "ogr")
            elif self.radioButton_cb.isChecked():
                # layerName = self.comboBox.currentText()
                vlayer = lg.getLayer(in_filename)

            # QgsProject.instance().addMapLayer(vlayer)
            # for field in vlayer.fields():
            #     guiUtil.setOutputStyle([0, str(field)])

            features = FeaturesList(vlayer.fields(), vlayer.getFeatures())
            # for feat in features.getFeaturesList():
            #     vals = feat.getAllValues()
            #     for val in vals:
            #         if str(type(val)) == "<class 'PyQt5.QtCore.QDateTime'>":
            #             new = val.currentDateTime().toString(Qt.ISODate)
            #             guiUtil.setOutputStyle([0, str(new)])
            #     break

            if self.checkBox.isChecked():
                features.removeNullPoints()

        except Exception as err:
            guiUtil.setOutputStyle([-1, 'Файл не создан! ' + str(err)])

        # основной алгоритм
        try:
            if self.checkBox_class.isChecked():
                tool = ClassificationTool(GuiElemIFace(self.textEdit))
                features = tool.mainAzimutCalc(features, self.checkBox_numProfiles.isChecked())
        except Exception as err:
            guiUtil.setOutputStyle([-1, '\nНе удалось классифицировать точки! ' + str(err)])

        try:
            if self.checkBox_delete.isChecked():
                features.removeSpoiledPoints()

            # записываем объекты в новый слой
            if self.radioButton_shp.isChecked():
                mess = lg.saveToShapefile("ESRI Shapefile", "UTF-8", save_file_attr, features)
            elif self.radioButton_txt.isChecked():
                mess = lg.saveToTextFile("delimitedtext", "UTF-8", save_file_attr, features)
            guiUtil.setOutputStyle(mess)
        except Exception as err:
            guiUtil.setOutputStyle([-1, '\nНе удалось сохранить/загрузить файл! ' + str(err)])

    def doResult(self):
        self.textEdit.setText('')
        start = perf_counter()
        guiUtil = GuiElemIFace(self.textEdit)

        if self.radioButton_cb.isChecked():
            save_file_attr = self.getSaveFilepath()
            layerName = self.comboBox.currentText()
            self.mainAlgorithm(guiUtil, '', None, layerName, save_file_attr)

        # if save_file_attr is None or layerName == '':
        #     guiUtil.setOutputStyle([-1, 'Файл для сохранения не выбран! '])
        elif self.radioButton_folder.isChecked():
            save_file_attr = self.getSaveFilepath()
            inputDir = self.lineEdit_folder.text()
            saveFolderPath = save_file_attr[0]

            extentions = {'.shp': 'ESRI Shapefile', '.txt': 'delimitedtext'}

            with os.scandir(inputDir) as dir:
                for file in dir:
                    in_filepath, in_file_extension = os.path.splitext(file)

                    if extentions.get(in_file_extension) is not None:
                        in_filepath = in_filepath + in_file_extension
                        in_filename = file.name.split(in_file_extension)[0] + "_test"
                        # guiUtil.setOutputStyle([0, str(in_file_extension)])
                        # guiUtil.setOutputStyle([0, str(in_filename)])

                        if self.radioButton_txt.isChecked():
                            save_file_attr[0] = saveFolderPath + '/' + in_filename + self.radioButton_txt.text()  #'.txt'
                        elif self.radioButton_shp.isChecked():
                            save_file_attr[0] = saveFolderPath + '/' + in_filename + self.radioButton_shp.text()  # '.shp'

                        save_file_attr[1] = in_filename

                        self.mainAlgorithm(guiUtil, extentions.get(in_file_extension), in_filepath, in_filename, save_file_attr)


        end = perf_counter()
        guiUtil.setOutputStyle([0, '\nВремя работы плагина: ' + str(end - start)])
