# -*- coding: utf-8 -*-
"""
/***************************************************************************
 bpla_plugin_flightsDialog
                                 A QGIS plugin
 Selecting and deleting odds and ends of flights.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-01-13
        git sha              : $Format:%H$
        copyright            : (C) 2021 by SibGis
        email                : sibgis@qgis.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os

from PyQt5.QtCore import QVariant
from qgis._core import *

from PyQt5.QtGui import QIcon
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from PyQt5.QtGui import *

from time import perf_counter

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
from .tools.FeaturesList import FeaturesList
from .tools.ClassificationTool import ClassificationTool
from .tools.Feature import Feature
from .tools.LayerManager import LayerManager
from .tools.GuiElemIFace import GuiElemIFace

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'bpla_plugin_flights_dialog_base.ui'))


class bpla_plugin_flightsDialog(QtWidgets.QDialog, FORM_CLASS):

    def __init__(self, parent=None):
        """Constructor."""
        super(bpla_plugin_flightsDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.initActiveLayersComboBox()
        self.toolButton_cbreload.setIcon(QIcon(':/plugins/bpla_plugin_flights/icons/icon_reload.png'))
        self.toolButton_cbreload.clicked.connect(self.initActiveLayersComboBox)
        self.checkBox.setChecked(False)
        self.toolButton.clicked.connect(self.getSaveFileName)
        self.pushButton.clicked.connect(self.doResult)
        self.lineEdit.setText('')
        # self.lineEdit.setText(r'/Users/ronya/My_Documents/output/test.shp')

    def initActiveLayersComboBox(self):
        self.comboBox.clear()
        lg = LayerManager()
        dictLyr = lg.getActiveLayers()
        self.comboBox.addItems(dictLyr.keys())
        self.comboBox.show()

    def getSaveFileName(self):
        dlg = QtWidgets.QFileDialog(self)
        fn = dlg.getSaveFileName(self, 'Save file', r'/Users/ronya/My_Documents/output/test.shp', filter='*.shp')[0]
        self.lineEdit.setText(fn)

    def getFilepath(self):
        # get file name from line edit
        if self.lineEdit.text() != '':
            filepath = self.lineEdit.text()
            fn = os.path.basename(filepath)
            fn = fn.split('.shp')
            filename = fn[0]
            return filepath, filename
        else:
            return None


    def doResult(self):
        self.textEdit.setText('')
        start = perf_counter()
        guiUtil = GuiElemIFace(self.textEdit)
        lg = LayerManager()
        file_attr = self.getFilepath()
        layerName = self.comboBox.currentText()
        features = None

        if file_attr is None or layerName == '':
            guiUtil.setOutputStyle([-1, 'Файл для сохранения не выбран! '])
        else:
            try:
                # создаем вектор qgis
                lg.getLayer(layerName)
                vlayer = QgsVectorLayer(lg.layerpath, lg.layername, "ogr")

                features = FeaturesList(vlayer.fields(), vlayer.getFeatures())
                if self.checkBox.isChecked():
                    features.removeNullPoints()

            except Exception as err:
                guiUtil.setOutputStyle([-1, 'Файл не создан! ' + str(err)])

            # основной алгоритм
            try:
                tool = ClassificationTool(GuiElemIFace(self.textEdit))
                features = tool.mainAzimutCalc(features, self.checkBox_numProfiles.isChecked())
            except Exception as err:
                guiUtil.setOutputStyle([-1, '\nНе удалось классифицировать точки! ' + str(err)])

            try:
                if self.checkBox_delete.isChecked():
                    features.removeSpoiledPoints()

                # записываем объекты в новый слой
                mess = lg.saveToFile("ESRI Shapefile", "UTF-8", file_attr, features)
                guiUtil.setOutputStyle(mess)
            except Exception as err:
                guiUtil.setOutputStyle([-1, '\nНе удалось сохранить/загрузить файл! ' + str(err)])

        end = perf_counter()
        guiUtil.setOutputStyle([0, '\nВремя работы плагина: ' + str(end - start)])
