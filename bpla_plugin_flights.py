# -*- coding: utf-8 -*-
"""
/***************************************************************************
 bpla_plugin_flights
                                 A QGIS plugin
 Selecting and deleting odds and ends of flights.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-01-13
        git sha              : $Format:%H$
        copyright            : (C) 2021 by SibGis
        email                : sibgis@qgis.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
# Import the code for the dialog
from qgis.core import QgsVectorFileWriter, QgsProject, QgsVectorLayer, QgsDataProvider, QgsFeatureRequest

from .bpla_plugin_flights_dialog import bpla_plugin_flightsDialog, edit
import os.path
from qgis.utils import *
from osgeo import ogr
import sys

# from .features_editing import *

class bpla_plugin_flights:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'bpla_plugin_flights_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&bpla_plugin_flights')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('bpla_plugin_flights', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/bpla_plugin_flights/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&bpla_plugin_flights'),
                action)
            self.iface.removeToolBarIcon(action)

    def layerToList(self):
        # create temp layer
        # open an input datasource
        indriver = ogr.GetDriverByName('ESRI shapefile')
        srcdb = indriver.Open(self.layer, 0)

        # create an output datasource in memory
        outdriver = ogr.GetDriverByName('MEMORY')
        source = outdriver.CreateDataSource('memData')

        # open the memory datasource with write access
        tmp = outdriver.Open('memData', 1)

        # copy a layer to memory
        pipes_mem = source.CopyLayer(srcdb.GetLayer(self.layer), 'temp_layer', ['OVERWRITE=YES'])

        # the new layer can be directly accessed via the handle pipes_mem or as source.GetLayer('temp_layer'):
        layer = source.GetLayer('temp_layer')
        for feature in layer:
            iface.messageBar().pushMessage(feature.GetField(0), feature['TIME'], level=0)
            # print(feature.GetField(0), feature['TIME'])
            # feature.SetField('SOMETHING', 1)
            break

        # create list of features
        pass

    def removeZeroFeatures(self):
        with edit(self.layer):
            # build a request to filter the features based on an attribute
            request = QgsFeatureRequest().setFilterExpression('"LON" = 0.0 and "LAT" = 0.0')

            # we don't need attributes or geometry, skip them to minimize overhead.
            # these lines are not strictly required but improve performance
            request.setSubsetOfAttributes([])
            request.setFlags(QgsFeatureRequest.NoGeometry)

            # loop over the features and delete
            for f in self.layer.getFeatures(request):
                self.layer.deleteFeature(f.id())
    #

    #
    # def layerToShapefile(self):
    #     # Write to an ESRI Shapefile format dataset using UTF-8 text encoding
    #     save_options = QgsVectorFileWriter.SaveVectorOptions()
    #     save_options.driverName = "ESRI Shapefile"
    #     save_options.fileEncoding = "UTF-8"
    #     transform_context = QgsProject.instance().transformContext()
    #
    #     error = QgsVectorFileWriter.writeAsVectorFormat(self.layer, self.filename,
    #                                                     "CP1250", self.layer.crs(),
    #                                                     "ESRI Shapefile")
    #
    #     if error[0] == QgsVectorFileWriter.NoError:
    #         iface.messageBar().pushMessage("Successfully saved!", level=0)
    #         # # uploading new file to the map
    #         # layer = iface.addVectorLayer(r"M:\Sourcetree\bpla_plugin_flights\output\test1.shp", "new_layer", "ogr")
    #         filepath = self.filename + '.shp'
    #         # iface.messageBar().pushMessage(filepath, level=0)
    #         layer = iface.addVectorLayer(filepath, "new_layer", "ogr")
    #         if not layer:
    #             iface.messageBar().pushMessage("Layer failed to load!", level=0)
    #     else:
    #         iface.messageBar().pushMessage("Something went wrong... ", error,  level=0)

    def getLayer(self):
        # get layer from combobox
        self.layer = self.dlg.mMapLayerComboBox.currentLayer()

    def getFilename(self):
        # get file name from line edit
        self.filename = self.dlg.lineEdit.text()


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = bpla_plugin_flightsDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.

            self.getLayer()
            self.getFilename()

            self.layerToList()
            # removing zero features
            # if self.dlg.checkBox.isChecked():
            #     self.removeZeroFeatures()

            # saving the result into file
            # self.layerToShapefile()

            pass





